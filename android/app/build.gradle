// apply plugin: "com.android.application"

// import com.android.build.OutputFile

// /**
//  * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
//  * and bundleReleaseJsAndAssets).
//  * These basically call `react-native bundle` with the correct arguments during the Android build
//  * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
//  * bundle directly from the development server. Below you can see all the possible configurations
//  * and their defaults. If you decide to add a configuration block, make sure to add it before the
//  * `apply from: "../../node_modules/react-native/react.gradle"` line.
//  *
//  * project.ext.react = [
//  *   // the name of the generated asset file containing your JS bundle
//  *   bundleAssetName: "index.android.bundle",
//  *
//  *   // the entry file for bundle generation
//  *   entryFile: "index.android.js",
//  *
//  *   // https://facebook.github.io/react-native/docs/performance#enable-the-ram-format
//  *   bundleCommand: "ram-bundle",
//  *
//  *   // whether to bundle JS and assets in debug mode
//  *   bundleInDebug: false,
//  *
//  *   // whether to bundle JS and assets in release mode
//  *   bundleInRelease: true,
//  *
//  *   // whether to bundle JS and assets in another build variant (if configured).
//  *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
//  *   // The configuration property can be in the following formats
//  *   //         'bundleIn${productFlavor}${buildType}'
//  *   //         'bundleIn${buildType}'
//  *   // bundleInFreeDebug: true,
//  *   // bundleInPaidRelease: true,
//  *   // bundleInBeta: true,
//  *
//  *   // whether to disable dev mode in custom build variants (by default only disabled in release)
//  *   // for example: to disable dev mode in the staging build type (if configured)
//  *   devDisabledInStaging: true,
//  *   // The configuration property can be in the following formats
//  *   //         'devDisabledIn${productFlavor}${buildType}'
//  *   //         'devDisabledIn${buildType}'
//  *
//  *   // the root of your project, i.e. where "package.json" lives
//  *   root: "../../",
//  *
//  *   // where to put the JS bundle asset in debug mode
//  *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
//  *
//  *   // where to put the JS bundle asset in release mode
//  *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
//  *
//  *   // where to put drawable resources / React Native assets, e.g. the ones you use via
//  *   // require('./image.png')), in debug mode
//  *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
//  *
//  *   // where to put drawable resources / React Native assets, e.g. the ones you use via
//  *   // require('./image.png')), in release mode
//  *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
//  *
//  *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
//  *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
//  *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
//  *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
//  *   // for example, you might want to remove it from here.
//  *   inputExcludes: ["android/**", "ios/**"],
//  *
//  *   // override which node gets called and with what additional arguments
//  *   nodeExecutableAndArgs: ["node"],
//  *
//  *   // supply additional arguments to the packager
//  *   extraPackagerArgs: []
//  * ]
//  */

// project.ext.react = [
//         entryFile: "index.js",
//         enableHermes: true,
// ]

// apply from: "../../node_modules/react-native/react.gradle"

// /**
//  * Set this to true to create two separate APKs instead of one:
//  *   - An APK that only works on ARM devices
//  *   - An APK that only works on x86 devices
//  * The advantage is the size of the APK is reduced by about 4MB.
//  * Upload all the APKs to the Play Store and people will download
//  * the correct one based on the CPU architecture of their device.
//  */
// def enableSeparateBuildPerCPUArchitecture = false

// /**
//  * Run Proguard to shrink the Java bytecode in release builds.
//  */
// def enableProguardInReleaseBuilds = false

// /**
//  * The preferred build flavor of JavaScriptCore.
//  *
//  * For example, to use the international variant, you can use:
//  * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
//  *
//  * The international variant includes ICU i18n library and necessary data
//  * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
//  * give correct results when using with locales other than en-US.  Note that
//  * this variant is about 6MiB larger per architecture than default.
//  */
// def jscFlavor = 'org.webkit:android-jsc:+'
// /**
//  * Whether to enable the Hermes VM.
//  *
//  * This should be set on project.ext.react and mirrored here.  If it is not set
//  * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
//  * and the benefits of using Hermes will therefore be sharply reduced.
//  */
// def enableHermes = project.ext.react.get("enableHermes", true);

// android {
//     ndkVersion rootProject.ext.ndkVersion

//     compileSdkVersion rootProject.ext.compileSdkVersion

//     compileSdkVersion rootProject.ext.compileSdkVersion
//     lintOptions {
//         checkReleaseBuilds false
//         abortOnError false
//     }
//     compileOptions {
//         // Flag to enable support for the new language APIs
//         //coreLibraryDesugaringEnabled true
//         // Sets Java compatibility to Java 8
//         sourceCompatibility JavaVersion.VERSION_1_8
//         targetCompatibility JavaVersion.VERSION_1_8
//     }

//     defaultConfig {
//         missingDimensionStrategy 'react-native-camera', 'general' /* insert this line */
//         multiDexEnabled true
//         applicationId "com.blazor.bdmt"
//         minSdkVersion rootProject.ext.minSdkVersion
//         targetSdkVersion rootProject.ext.targetSdkVersion
//         versionCode 2
//         versionName "2.1"
//     }
//     signingConfigs {
//         debug {
//             //storeFile file('google-services.jks')
//             storeFile file('debug.keystore')
//             storePassword 'android'
//             keyAlias 'androiddebugkey'
//             keyPassword 'android'
//         }
//         /* release {
//              storeFile file("google-services.jks")
//              //storeFile file('debug.keystore')
//              storePassword 'android'
//              keyAlias 'androiddebugkey'
//              keyPassword 'android'
//          } */
//     }
//     splits {
//         abi {
//             reset()
//             enable enableSeparateBuildPerCPUArchitecture
//             universalApk false  // If true, also generate a universal APK
//             include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
//         }
//     }
//     buildTypes {
//         debug {
//             signingConfig signingConfigs.debug
//         }
//         release {
//             // Caution! In production, you need to generate your own keystore file.
//             // see https://facebook.github.io/react-native/docs/signed-apk-android.
//             signingConfig signingConfigs.debug
//             minifyEnabled enableProguardInReleaseBuilds
//             proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
//         }
//     }
//     // applicationVariants are e.g. debug, release
//     applicationVariants.all { variant ->
//         variant.outputs.each { output ->
//             // For each separate APK per architecture, set a unique version code as described here:
//             // https://developer.android.com/studio/build/configure-apk-splits.html
//             def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
//             def name = "BMT.apk"
//             def abi = output.getFilter(OutputFile.ABI)
//             if (abi != null) {  // null for the universal-debug, universal-release variants
//                 output.versionCodeOverride =
//                         versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
//             }
//             output.outputFileName = name
//         }
//     }
//     packagingOptions {
//         pickFirst 'lib/x86/libc++_shared.so'
//         pickFirst 'lib/x86_64/libjsc.so'
//         pickFirst 'lib/arm64-v8a/libjsc.so'
//         pickFirst 'lib/arm64-v8a/libc++_shared.so'
//         pickFirst 'lib/x86_64/libc++_shared.so'
//         pickFirst 'lib/armeabi-v7a/libc++_shared.so'
//     }
// }

// dependencies {
//     implementation fileTree(dir: "libs", include: ["*.jar"])
//     implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.3.31'
//     implementation 'nl.dionsegijn:konfetti:1.1.2'
//     implementation "me.leolin:ShortcutBadger:1.1.22@aar"
//     implementation project(':react-native-push-notification')
//     implementation 'com.google.firebase:firebase-analytics:17.3.0'
//     implementation "com.facebook.react:react-native:+"  // From node_modules
//     implementation 'com.facebook.fresco:fresco:2.0.0'
//     implementation 'com.facebook.fresco:animated-gif:2.0.0'
//     //implementation 'com.android.support:multidex:1.0.3'
//     implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.0.0'
//     // implementation 'com.facebook.android:facebook-android-sdk:latest.release'
//     implementation 'com.facebook.android:facebook-android-sdk:4.30.0'
//     //implementation 'com.android.support:multidex:2.0.1'
//     // compile project(':react-native-document-picker')

//     implementation platform('com.google.firebase:firebase-bom:32.0.0')
//     implementation 'androidx.appcompat:appcompat:1.3.0'
//     implementation 'com.facebook.android:facebook-login:11.2.1'
//     implementation 'com.willowtreeapps:signinwithapplebutton:0.3'
//     // 'com.android.tools:desugar_jdk_libs:1.2.2'

//     implementation fileTree(dir: "libs", include: ["*.jar"])
//     //noinspection GradleDynamicVersion


//     debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
//         exclude group:'com.facebook.fbjni'
//     }

//     debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
//         exclude group:'com.facebook.flipper'
//         exclude group:'com.squareup.okhttp3', module:'okhttp'
//     }

//     debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
//         exclude group:'com.facebook.flipper'
//     }
//     /* implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.3.31'
//      implementation 'nl.dionsegijn:konfetti:1.1.2'
//      implementation "me.leolin:ShortcutBadger:1.1.22@aar"
//      implementation project(':react-native-version-check')
//      implementation platform('com.google.firebase:firebase-bom:32.0.0')
//      implementation 'com.google.firebase:firebase-analytics:17.3.0'
//      implementation project(':react-native-push-notification')
//      implementation "com.facebook.react:react-native:+"  // From node_modules
//      compile project(':react-native-image-picker')
//      implementation 'com.facebook.fresco:fresco:2.0.0'
//      implementation 'com.facebook.fresco:animated-gif:2.0.0'
//      implementation 'com.android.support:multidex:1.0.3'
//      implementation project(':react-native-immediate-phone-call')
//      implementation 'com.facebook.android:facebook-android-sdk:4.30.0'
//      implementation 'androidx.appcompat:appcompat:1.3.0'
//      implementation 'com.facebook.android:facebook-login:11.2.1'

//      */

//     /*
//     dependencies {
//         // Facebook Core only (Analytics)
//         implementation 'com.facebook.android:facebook-core:latest.release'

//         // Facebook Login only
//         implementation 'com.facebook.android:facebook-login:latest.release'

//         // Facebook Share only
//         implementation 'com.facebook.android:facebook-share:latest.release'

//         // Facebook Messenger only
//         implementation 'com.facebook.android:facebook-messenger:latest.release'

//         // Facebook App Links only
//         implementation 'com.facebook.android:facebook-applinks:latest.release'

//         // Facebook Marketing only
//         implementation 'com.facebook.android:facebook-marketing:latest.release'

//         // Facebook Android SDK (everything)
//         implementation 'com.facebook.android:facebook-android-sdk:latest.release'
//     }
//     */
//     //implementation('androidx.work:work-runtime:2.7.0')
//     //implementation 'androidx.work:work-runtime-ktx:2.7.1'
//     if (enableHermes) {
//         def hermesPath = "../../node_modules/hermes-engine/android/";
//         debugImplementation files(hermesPath + "hermes-debug.aar")
//         releaseImplementation files(hermesPath + "hermes-release.aar")

//     } else {
//         implementation jscFlavor
//     }
//     //compile fileTree(dir: 'libs', include: ['*.jar'])
//     //compile 'com.android.support:appcompat-v7:21.0.3'
//     //compile 'com.facebook.android:facebook-android-sdk:4.0.0'
// }
// apply plugin: 'com.google.gms.google-services'
// // Run this once to be able to run the application with BUCK
// // puts all compile dependencies into folder libs for BUCK to use
// task copyDownloadableDepsToLibs(type: Copy) {
//     from configurations.compile
//     into 'libs'
// }

// apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply plugin: "com.google.gms.google-services"

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/@react-native/codegen
    // codegenDir = file("../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    // cliFile = file("../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "com.blazor.bdmt"
    defaultConfig {
        applicationId "com.blazor.bdmt"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 2
        versionName "2.1"
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")
    implementation(platform("com.google.firebase:firebase-bom:32.7.1"))

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
